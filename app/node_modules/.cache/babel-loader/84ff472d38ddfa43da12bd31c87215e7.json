{"ast":null,"code":"!function (t, e) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = e(require(\"react\"), require(\"prop-types\"), require(\"@drizzle/react-plugin\")) : \"function\" == typeof define && define.amd ? define([\"react\", \"prop-types\", \"@drizzle/react-plugin\"], e) : \"object\" == typeof exports ? exports[\"@drizzle/react-components\"] = e(require(\"react\"), require(\"prop-types\"), require(\"@drizzle/react-plugin\")) : t[\"@drizzle/react-components\"] = e(t.react, t[\"prop-types\"], t[\"@drizzle/react-plugin\"]);\n}(\"undefined\" != typeof self ? self : this, function (t, e, s) {\n  return function (t) {\n    var e = {};\n\n    function s(r) {\n      if (e[r]) return e[r].exports;\n      var n = e[r] = {\n        i: r,\n        l: !1,\n        exports: {}\n      };\n      return t[r].call(n.exports, n, n.exports, s), n.l = !0, n.exports;\n    }\n\n    return s.m = t, s.c = e, s.d = function (t, e, r) {\n      s.o(t, e) || Object.defineProperty(t, e, {\n        configurable: !1,\n        enumerable: !0,\n        get: r\n      });\n    }, s.n = function (t) {\n      var e = t && t.__esModule ? function () {\n        return t.default;\n      } : function () {\n        return t;\n      };\n      return s.d(e, \"a\", e), e;\n    }, s.o = function (t, e) {\n      return Object.prototype.hasOwnProperty.call(t, e);\n    }, s.p = \"\", s(s.s = 3);\n  }([function (e, s) {\n    e.exports = t;\n  }, function (t, s) {\n    t.exports = e;\n  }, function (t, e) {\n    t.exports = s;\n  }, function (t, e, s) {\n    \"use strict\";\n\n    Object.defineProperty(e, \"__esModule\", {\n      value: !0\n    }), s.d(e, \"newContextComponents\", function () {\n      return u;\n    });\n    var r = s(4),\n        n = s(5),\n        a = s(6),\n        i = s(7),\n        o = s(8),\n        c = s(9),\n        p = s(10);\n    s.d(e, \"AccountData\", function () {\n      return r.a;\n    }), s.d(e, \"ContractData\", function () {\n      return n.a;\n    }), s.d(e, \"ContractForm\", function () {\n      return a.a;\n    }), s.d(e, \"LoadingContainer\", function () {\n      return i.a;\n    });\n    const u = {\n      AccountData: o.a,\n      ContractData: c.a,\n      ContractForm: p.a\n    };\n  }, function (t, e, s) {\n    \"use strict\";\n\n    var r = s(2),\n        n = (s.n(r), s(0)),\n        a = s.n(n),\n        i = s(1),\n        o = s.n(i);\n\n    class c extends n.Component {\n      constructor(t) {\n        super(t), this.precisionRound = this.precisionRound.bind(this);\n      }\n\n      precisionRound(t, e) {\n        var s = Math.pow(10, e);\n        return Math.round(t * s) / s;\n      }\n\n      render() {\n        if (0 === Object.keys(this.props.accounts).length) return a.a.createElement(\"span\", null, \"Initializing...\");\n        const t = this.props.accounts[this.props.accountIndex];\n        var e = this.props.accountBalances[t];\n        const s = this.props.units ? this.props.units.charAt(0).toUpperCase() + this.props.units.slice(1) : \"Wei\";\n        return this.props.units && void 0 !== e && (e = this.context.drizzle.web3.utils.fromWei(e, this.props.units)), this.props.precision && (e = this.precisionRound(e, this.props.precision)), this.props.render ? this.props.render({\n          address: t,\n          balance: e,\n          units: s\n        }) : a.a.createElement(\"div\", null, a.a.createElement(\"h4\", null, t), a.a.createElement(\"p\", null, e, \" \", s));\n      }\n\n    }\n\n    c.contextTypes = {\n      drizzle: o.a.object\n    }, c.propTypes = {\n      accounts: o.a.objectOf(o.a.string),\n      accountBalances: o.a.objectOf(o.a.string),\n      accountIndex: o.a.number.isRequired,\n      units: o.a.string,\n      precision: o.a.number,\n      render: o.a.func\n    };\n    e.a = Object(r.drizzleConnect)(c, t => ({\n      accounts: t.accounts,\n      accountBalances: t.accountBalances\n    }));\n  }, function (t, e, s) {\n    \"use strict\";\n\n    var r = s(2),\n        n = (s.n(r), s(0)),\n        a = s.n(n),\n        i = s(1),\n        o = s.n(i);\n\n    class c extends n.Component {\n      constructor(t, e) {\n        super(t);\n        var s = this.props.methodArgs ? this.props.methodArgs : [];\n        this.contracts = e.drizzle.contracts, this.state = {\n          dataKey: this.contracts[this.props.contract].methods[this.props.method].cacheCall(...s)\n        };\n      }\n\n      componentWillReceiveProps(t) {\n        const {\n          methodArgs: e,\n          contract: s,\n          method: r\n        } = this.props,\n              n = s !== t.contract,\n              a = r !== t.method,\n              i = JSON.stringify(e) !== JSON.stringify(t.methodArgs);\n        (n || a || i) && this.setState({\n          dataKey: this.contracts[t.contract].methods[t.method].cacheCall(...t.methodArgs)\n        });\n      }\n\n      render() {\n        if (!this.props.contracts[this.props.contract].initialized) return a.a.createElement(\"span\", null, \"Initializing...\");\n        if (!(this.state.dataKey in this.props.contracts[this.props.contract][this.props.method])) return a.a.createElement(\"span\", null, \"Fetching...\");\n        var t = this.props.contracts[this.props.contract].synced ? \"\" : \" 🔄\";\n        this.props.hideIndicator && (t = \"\");\n        var e = this.props.contracts[this.props.contract][this.props.method][this.state.dataKey].value;\n        if (this.props.toUtf8 && (e = this.context.drizzle.web3.utils.hexToUtf8(e)), this.props.toAscii && (e = this.context.drizzle.web3.utils.hexToAscii(e)), this.props.render) return this.props.render(e);\n\n        if (Array.isArray(e)) {\n          const s = e.map((e, s) => a.a.createElement(\"li\", {\n            key: s\n          }, `${e}`, t));\n          return a.a.createElement(\"ul\", null, s);\n        }\n\n        if (\"object\" == typeof e) {\n          var s = 0;\n          const r = [];\n          return Object.keys(e).forEach(n => {\n            s != n && r.push(a.a.createElement(\"li\", {\n              key: s\n            }, a.a.createElement(\"strong\", null, n), t, a.a.createElement(\"br\", null), `${e[n]}`)), s++;\n          }), a.a.createElement(\"ul\", null, r);\n        }\n\n        return a.a.createElement(\"span\", null, `${e}`, t);\n      }\n\n    }\n\n    c.contextTypes = {\n      drizzle: o.a.object\n    }, c.propTypes = {\n      contracts: o.a.object.isRequired,\n      contract: o.a.string.isRequired,\n      method: o.a.string.isRequired,\n      methodArgs: o.a.array,\n      hideIndicator: o.a.bool,\n      toUtf8: o.a.bool,\n      toAscii: o.a.bool,\n      render: o.a.func\n    };\n    e.a = Object(r.drizzleConnect)(c, t => ({\n      contracts: t.contracts\n    }));\n  }, function (t, e, s) {\n    \"use strict\";\n\n    var r = s(2),\n        n = (s.n(r), s(0)),\n        a = s.n(n),\n        i = s(1),\n        o = s.n(i);\n\n    const c = t => {\n      switch (!0) {\n        case /^uint/.test(t):\n          return \"number\";\n\n        case /^string/.test(t) || /^bytes/.test(t):\n          return \"text\";\n\n        case /^bool/.test(t):\n          return \"checkbox\";\n\n        default:\n          return \"text\";\n      }\n    };\n\n    class p extends n.Component {\n      constructor(t, e) {\n        super(t), this.handleInputChange = this.handleInputChange.bind(this), this.handleSubmit = this.handleSubmit.bind(this), this.contracts = e.drizzle.contracts, this.utils = e.drizzle.web3.utils;\n        const s = this.contracts[this.props.contract].abi;\n        this.inputs = [];\n\n        for (var r = {}, n = 0; n < s.length; n++) if (s[n].name === this.props.method) {\n          this.inputs = s[n].inputs;\n\n          for (var a = 0; a < this.inputs.length; a++) r[this.inputs[a].name] = \"\";\n\n          break;\n        }\n\n        this.state = r;\n      }\n\n      handleSubmit(t) {\n        t.preventDefault();\n        const e = this.inputs.map(t => \"bytes32\" === t.type ? this.utils.toHex(this.state[t.name]) : this.state[t.name]);\n        return this.props.sendArgs ? this.contracts[this.props.contract].methods[this.props.method].cacheSend(...e, this.props.sendArgs) : this.contracts[this.props.contract].methods[this.props.method].cacheSend(...e);\n      }\n\n      handleInputChange(t) {\n        const e = \"checkbox\" === t.target.type ? t.target.checked : t.target.value;\n        this.setState({\n          [t.target.name]: e\n        });\n      }\n\n      render() {\n        return this.props.render ? this.props.render({\n          inputs: this.inputs,\n          inputTypes: this.inputs.map(t => c(t.type)),\n          state: this.state,\n          handleInputChange: this.handleInputChange,\n          handleSubmit: this.handleSubmit\n        }) : a.a.createElement(\"form\", {\n          className: \"pure-form pure-form-stacked\",\n          onSubmit: this.handleSubmit\n        }, this.inputs.map((t, e) => {\n          var s = c(t.type),\n              r = this.props.labels ? this.props.labels[e] : t.name;\n          return a.a.createElement(\"input\", {\n            key: t.name,\n            type: s,\n            name: t.name,\n            value: this.state[t.name],\n            placeholder: r,\n            onChange: this.handleInputChange\n          });\n        }), a.a.createElement(\"button\", {\n          key: \"submit\",\n          className: \"pure-button\",\n          type: \"button\",\n          onClick: this.handleSubmit\n        }, \"Submit\"));\n      }\n\n    }\n\n    p.contextTypes = {\n      drizzle: o.a.object\n    }, p.propTypes = {\n      contract: o.a.string.isRequired,\n      method: o.a.string.isRequired,\n      sendArgs: o.a.object,\n      labels: o.a.arrayOf(o.a.string),\n      render: o.a.func\n    };\n    e.a = Object(r.drizzleConnect)(p, t => ({\n      contracts: t.contracts\n    }));\n  }, function (t, e, s) {\n    \"use strict\";\n\n    var r = s(2),\n        n = (s.n(r), s(0)),\n        a = s.n(n),\n        i = s(1),\n        o = s.n(i);\n\n    class c extends n.Component {\n      render() {\n        return \"failed\" === this.props.web3.status ? this.props.errorComp ? this.props.errorComp : a.a.createElement(\"main\", {\n          className: \"container loading-screen\"\n        }, a.a.createElement(\"div\", {\n          className: \"pure-g\"\n        }, a.a.createElement(\"div\", {\n          className: \"pure-u-1-1\"\n        }, a.a.createElement(\"h1\", null, \"⚠️\"), a.a.createElement(\"p\", null, \"This browser has no connection to the Ethereum network. Please use the Chrome/FireFox extension MetaMask, or dedicated Ethereum browsers Mist or Parity.\")))) : \"initialized\" === this.props.web3.status && 0 === Object.keys(this.props.accounts).length ? a.a.createElement(\"main\", {\n          className: \"container loading-screen\"\n        }, a.a.createElement(\"div\", {\n          className: \"pure-g\"\n        }, a.a.createElement(\"div\", {\n          className: \"pure-u-1-1\"\n        }, a.a.createElement(\"h1\", null, \"🦊\"), a.a.createElement(\"p\", null, a.a.createElement(\"strong\", null, \"We can't find any Ethereum accounts!\"), \" Please check and make sure Metamask or your browser are pointed at the correct network and your account is unlocked.\")))) : this.props.drizzleStatus.initialized ? n.Children.only(this.props.children) : this.props.loadingComp ? this.props.loadingComp : a.a.createElement(\"main\", {\n          className: \"container loading-screen\"\n        }, a.a.createElement(\"div\", {\n          className: \"pure-g\"\n        }, a.a.createElement(\"div\", {\n          className: \"pure-u-1-1\"\n        }, a.a.createElement(\"h1\", null, \"⚙️\"), a.a.createElement(\"p\", null, \"Loading dapp...\"))));\n      }\n\n    }\n\n    c.contextTypes = {\n      drizzle: o.a.object\n    }, c.propTypes = {\n      children: o.a.node,\n      accounts: o.a.object.isRequired,\n      drizzleStatus: o.a.object.isRequired,\n      web3: o.a.object.isRequired,\n      loadingComp: o.a.node,\n      errorComp: o.a.node\n    };\n    e.a = Object(r.drizzleConnect)(c, t => ({\n      accounts: t.accounts,\n      drizzleStatus: t.drizzleStatus,\n      web3: t.web3\n    }));\n  }, function (t, e, s) {\n    \"use strict\";\n\n    var r = s(0),\n        n = s.n(r),\n        a = s(1),\n        i = s.n(a);\n\n    class o extends r.Component {\n      constructor(t) {\n        super(t), this.precisionRound = this.precisionRound.bind(this);\n      }\n\n      precisionRound(t, e) {\n        var s = Math.pow(10, e);\n        return Math.round(t * s) / s;\n      }\n\n      render() {\n        if (0 === Object.keys(this.props.drizzleState.accounts).length) return n.a.createElement(\"span\", null, \"Initializing...\");\n        const t = this.props.drizzleState.accounts[this.props.accountIndex];\n        var e = this.props.drizzleState.accountBalances[t];\n        const s = this.props.units ? this.props.units.charAt(0).toUpperCase() + this.props.units.slice(1) : \"Wei\";\n        return this.props.units && void 0 !== e && (e = this.props.drizzle.web3.utils.fromWei(e, this.props.units)), this.props.precision && (e = this.precisionRound(e, this.props.precision)), this.props.render ? this.props.render({\n          address: t,\n          balance: e,\n          units: s\n        }) : n.a.createElement(\"div\", null, n.a.createElement(\"h4\", null, t), n.a.createElement(\"p\", null, e, \" \", s));\n      }\n\n    }\n\n    o.propTypes = {\n      drizzle: i.a.object.isRequired,\n      drizzleState: i.a.object.isRequired,\n      accountIndex: i.a.number.isRequired,\n      units: i.a.string,\n      precision: i.a.number,\n      render: i.a.func\n    }, e.a = o;\n  }, function (t, e, s) {\n    \"use strict\";\n\n    var r = s(0),\n        n = s.n(r),\n        a = s(1),\n        i = s.n(a);\n\n    class o extends r.Component {\n      constructor(t) {\n        super(t);\n        var e = this.props.methodArgs ? this.props.methodArgs : [];\n        this.contracts = t.drizzle.contracts, this.state = {\n          dataKey: this.contracts[this.props.contract].methods[this.props.method].cacheCall(...e)\n        };\n      }\n\n      UNSAFE_componentWillReceiveProps(t) {\n        const {\n          methodArgs: e,\n          contract: s,\n          method: r\n        } = this.props,\n              n = s !== t.contract,\n              a = r !== t.method,\n              i = JSON.stringify(e) !== JSON.stringify(t.methodArgs);\n        (n || a || i) && this.setState({\n          dataKey: this.contracts[t.contract].methods[t.method].cacheCall(...t.methodArgs)\n        });\n      }\n\n      render() {\n        const {\n          drizzle: t,\n          drizzleState: e\n        } = this.props;\n        if (!e.contracts[this.props.contract].initialized) return n.a.createElement(\"span\", null, \"Initializing...\");\n        if (!(this.state.dataKey in e.contracts[this.props.contract][this.props.method])) return n.a.createElement(\"span\", null, \"Fetching...\");\n        var s = e.contracts[this.props.contract].synced ? \"\" : \" 🔄\";\n        this.props.hideIndicator && (s = \"\");\n        var r = e.contracts[this.props.contract][this.props.method][this.state.dataKey].value;\n        if (this.props.toUtf8 && (r = t.web3.utils.hexToUtf8(r)), this.props.toAscii && (r = t.web3.utils.hexToAscii(r)), this.props.render) return this.props.render(r);\n\n        if (Array.isArray(r)) {\n          const t = r.map((t, e) => n.a.createElement(\"li\", {\n            key: e\n          }, `${t}`, s));\n          return n.a.createElement(\"ul\", null, t);\n        }\n\n        if (\"object\" == typeof r) {\n          var a = 0;\n          const t = [];\n          return Object.keys(r).forEach(e => {\n            a != e && t.push(n.a.createElement(\"li\", {\n              key: a\n            }, n.a.createElement(\"strong\", null, e), s, n.a.createElement(\"br\", null), `${r[e]}`)), a++;\n          }), n.a.createElement(\"ul\", null, t);\n        }\n\n        return n.a.createElement(\"span\", null, `${r}`, s);\n      }\n\n    }\n\n    o.propTypes = {\n      drizzle: i.a.object.isRequired,\n      drizzleState: i.a.object.isRequired,\n      contract: i.a.string.isRequired,\n      method: i.a.string.isRequired,\n      methodArgs: i.a.array,\n      hideIndicator: i.a.bool,\n      toUtf8: i.a.bool,\n      toAscii: i.a.bool,\n      render: i.a.func\n    }, e.a = o;\n  }, function (t, e, s) {\n    \"use strict\";\n\n    var r = s(0),\n        n = s.n(r),\n        a = s(1),\n        i = s.n(a);\n\n    const o = t => {\n      switch (!0) {\n        case /^uint/.test(t):\n          return \"number\";\n\n        case /^string/.test(t) || /^bytes/.test(t):\n          return \"text\";\n\n        case /^bool/.test(t):\n          return \"checkbox\";\n\n        default:\n          return \"text\";\n      }\n    };\n\n    class c extends r.Component {\n      constructor(t) {\n        super(t), this.handleInputChange = this.handleInputChange.bind(this), this.handleSubmit = this.handleSubmit.bind(this), this.contracts = t.drizzle.contracts, this.utils = t.drizzle.web3.utils;\n        const e = this.contracts[this.props.contract].abi;\n        this.inputs = [];\n\n        for (var s = {}, r = 0; r < e.length; r++) if (e[r].name === this.props.method) {\n          this.inputs = e[r].inputs;\n\n          for (var n = 0; n < this.inputs.length; n++) s[this.inputs[n].name] = \"\";\n\n          break;\n        }\n\n        this.state = s;\n      }\n\n      handleSubmit(t) {\n        t.preventDefault();\n        const e = this.inputs.map(t => \"bytes32\" === t.type ? this.utils.toHex(this.state[t.name]) : this.state[t.name]);\n        return this.props.sendArgs ? this.contracts[this.props.contract].methods[this.props.method].cacheSend(...e, this.props.sendArgs) : this.contracts[this.props.contract].methods[this.props.method].cacheSend(...e);\n      }\n\n      handleInputChange(t) {\n        const e = \"checkbox\" === t.target.type ? t.target.checked : t.target.value;\n        this.setState({\n          [t.target.name]: e\n        });\n      }\n\n      render() {\n        return this.props.render ? this.props.render({\n          inputs: this.inputs,\n          inputTypes: this.inputs.map(t => o(t.type)),\n          state: this.state,\n          handleInputChange: this.handleInputChange,\n          handleSubmit: this.handleSubmit\n        }) : n.a.createElement(\"form\", {\n          className: \"pure-form pure-form-stacked\",\n          onSubmit: this.handleSubmit\n        }, this.inputs.map((t, e) => {\n          var s = o(t.type),\n              r = this.props.labels ? this.props.labels[e] : t.name;\n          return n.a.createElement(\"input\", {\n            key: t.name,\n            type: s,\n            name: t.name,\n            value: this.state[t.name],\n            placeholder: r,\n            onChange: this.handleInputChange\n          });\n        }), n.a.createElement(\"button\", {\n          key: \"submit\",\n          className: \"pure-button\",\n          type: \"button\",\n          onClick: this.handleSubmit\n        }, \"Submit\"));\n      }\n\n    }\n\n    c.propTypes = {\n      drizzle: i.a.object.isRequired,\n      contract: i.a.string.isRequired,\n      method: i.a.string.isRequired,\n      sendArgs: i.a.object,\n      labels: i.a.arrayOf(i.a.string),\n      render: i.a.func\n    }, e.a = c;\n  }]);\n});","map":null,"metadata":{},"sourceType":"script"}